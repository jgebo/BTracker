@model PagedList.IPagedList<BTracker.Models.Ticket>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css">

@*<h2>@ViewBag.Title</h2>*@


@{if (ViewBag.pid == 0 && (User.IsInRole("Submitter") || User.IsInRole("Demo")))
{
    <h2>
        Ticket List
        @Html.ActionLink("New Ticket ", "Create") |  @Html.ActionLink(" Refresh Tickets", "Index", "Tickets", new { projectid = 0 }, null)
    </h2>
}
else
{
      <h2>
          Ticket List  @Html.ActionLink("Refresh Tickets", "Index", "Tickets", new { projectid = 0 }, null) 
      </h2>
 
}

}

<body>
    <div>
    <div style="font-size:14px">
        <table class="table-hover" colspan="9">
            @*<tr>*@
            @*<th colspan="8"></th>*@
            @*</tr>*@
            <tr style="background-color:gainsboro">
                @foreach (var col in new[] { "Title", "Owner", "Assigned", "Project", "Priority", "Status", "Type", "LastUpdated" })
                {
                    <th>
                        @Html.ActionLink(col, "Sort", new { property = col, model = Model })
                    </th>
                }
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    @Html.HiddenFor(modelItem => item.Description)
                    @Html.HiddenFor(modelItem => item.CreatedOn)
                    @Html.HiddenFor(modelItem => item.ProjectId)
                    @Html.HiddenFor(modelItem => item.PriorityId)
                    @Html.HiddenFor(modelItem => item.StatusId)
                    @Html.HiddenFor(modelItem => item.TypeId)

                    <td class="col-md-3">
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.BTUser1.DisplayName, "Index", new { param = item.BTUser.UserName, paramtype = "Owner" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.BTUser.DisplayName, "Index", new { param = item.BTUser1.UserName, paramtype = "Assigned" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.Project.Name, "Index", new { param = item.Project.Name, paramtype = "Project" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.TicketPriority.Name, "Index", new { param = item.TicketPriority.Name, paramtype = "Priority" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.TicketStatus.Name, "Index", new { param = item.TicketStatus.Name, paramtype = "Status" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.ActionLink(item.TicketType.Name, "Index", new { param = item.TicketType.Name, paramtype = "Type" }, new { @class = "text-muted" })
                    </td>
                    <td class="col-md-3">
                        @Html.DisplayFor(modelItem => item.UpdatedOn)
                    </td>
                    <td class="col-md-3">
                        @if (User.IsInRole("Developer") || User.IsInRole("Demo"))
                        {
                            @Html.ActionLink("Edit | ", "Edit", new { id = item.Id })
                            @Html.ActionLink("Details", "Details", new { id = item.Id })
                        }
                        else
                        {
                            @Html.ActionLink("Details", "Details", new { id = item.Id })
                        }
                    </td>
                </tr>
            }
        </table>
    </div>
        </div>
</body>
        <br />
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page, projectid = ViewBag.pid }))


